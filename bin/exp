#!/usr/bin/env python3
import sys
import os.path
import os
import subprocess

def parse_conn(s):
    s = s.replace(":", " ")
    s = s.replace(",", " ")
    s = s.strip()
    parts = s.split(" ")
    if len(parts) == 3:
        return parts[1], int(parts[2])
    if len(parts) == 2:
        return parts[0], int(parts[1])
    raise RuntimeError("cannot parse conn")


if os.path.exists("script.py"):
    print("script already exists, exiting")
    sys.exit(1)

binary = sys.argv[1]
libc = sys.argv[2] if len(sys.argv) > 2 else None

try:
    conn_string = subprocess.check_output(["xsel", "-ob"]).decode()
    host, port = parse_conn(conn_string)
except RuntimeError:
    conn_string = input("conn: ")
    if conn_string.strip():
        host, port = parse_conn(conn_string)
    else:
        host, port = "localhost", "1337"

libc_string = "exe.libc" if libc is None else f'ELF("{libc}") if args.REMOTE else exe.libc'
template = f'''
#!/usr/bin/env python2
from pwn import *

exe = context.binary = ELF("{binary}")
libc = {libc_string}

r = None
def connect(fresh=True, local=False):
    global r
    if r is not None:
        if fresh:
            r.close()
        else:
            return
    r = remote("{host}", {port}) if args.REMOTE and not local else exe.process()

connect()

r.interactive()
'''.lstrip()

with open("script.py", "w") as f:
    f.write(template)

os.system(f"chmod +x '{binary}'")
os.system("chmod +x script.py")
os.system("em script.py")
