#!/usr/bin/env python3
import sys
import os.path
import os
import subprocess
import re

REMOTE_CALL = re.compile(r'remote(.*)')
RE_SSL = re.compile(r'\s+--ssl\s+')
def parse_conn(s):
    m = REMOTE_CALL.search(s)
    if m:
        return m.group(0)

    ssl = '--ssl' in s or bool(re.search(r'ssl\s*=\s*True', s)) or 's_client' in s
    if RE_SSL.search(s):
        ssl = True
        s = RE_SSL.sub(' ', s)

    s = s.replace(":", " ")
    s = s.replace(",", " ")
    s = s.strip()
    parts = s.split(" ")

    if len(parts) == 3:
        return f'remote("{parts[1]}", {int(parts[2])}, ssl={ssl})'
    if len(parts) == 2:
        return f'remote("{parts[0]}", {int(parts[1])}, ssl={ssl})'
    raise RuntimeError("cannot parse conn")


if os.path.exists("script.py"):
    print("script already exists, exiting")
    sys.exit(1)

binary = sys.argv[1]
libc = sys.argv[2] if len(sys.argv) > 2 else None

try:
    conn_string = subprocess.check_output(["xsel", "-ob"]).decode()
    conn = parse_conn(conn_string)
except RuntimeError:
    conn_string = input("conn: ")
    if conn_string.strip():
        conn = parse_conn(conn_string)
    else:
        conn = 'remote("localhost", 1337)'

libc_string = "exe.libc" if libc is None else f'ELF("{libc}") if args.REMOTE else exe.libc'
template = f'''
#!/usr/bin/env python3
from pwn import *

exe = context.binary = ELF("{binary}")
libc = {libc_string}

r: process = None # type: ignore
def connect(fresh=True, local=False):
    global r
    if r is not None:
        if fresh:
            r.close()
        else:
            return
    r = {conn} if args.REMOTE and not local else exe.process() # type: ignore

connect()

r.interactive()
'''.lstrip()

with open("script.py", "w") as f:
    f.write(template)

os.system(f"chmod +x '{binary}'")
os.system("chmod +x script.py")
os.system("em script.py")
